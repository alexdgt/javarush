package com.javarush.test.level22.lesson09.task01;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/* Обращенные слова
В методе main с консоли считать имя файла, который содержит слова, разделенные пробелами.
Найти в тексте все пары слов, которые являются обращением друг друга. Добавить их в result.
Порядок слов first/second не влияет на тестирование.
Использовать StringBuilder.
Пример содержимого файла
рот тор торт о
о тот тот тот
Вывод:
рот тор
о о
тот тот
*/
public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) throws IOException
    {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader fileReader = new BufferedReader(new FileReader (bufferedReader.readLine()));
        List<String> stringList = new ArrayList<>();
        while (fileReader.ready()){
            String [] strings = (fileReader.readLine().split(" "));
            for (String s: strings){
                stringList.add(s);
            }
        }
        while (stringList.size() > 1){
            if (stringList.get(0).equals("")) stringList.remove(0);
            StringBuilder reverse = new StringBuilder();
            reverse.append(stringList.get(0)).reverse();
            String s = stringList.get(0);
            stringList.remove(0);
            if (stringList.contains(reverse.toString())){
                result.add(new Pair(s,reverse.toString()));
                stringList.remove(stringList.indexOf(reverse.toString()));
            }
        }
        for (Pair p : result ){
            System.out.println(p.toString());
        }
    }

    public static class Pair {
        String first;
        String second;

        public Pair(String first, String second)
        {
            this.first = first;
            this.second = second;
        }

        @Override
        public String toString() {
            return  first == null && second == null ? "" :
                    first == null && second != null ? second :
                    second == null && first != null ? first :
                    first.compareTo(second) < 0 ? first + " " + second : second + " " + first;
        }
    }
}
